@startuml
class com.profit_taker.game.model.Contract {
~ double money
~ double countProduct
~ double countResourse1
~ double countResourse2
~ int time
}
class com.profit_taker.game.model.FarmCell {
~ String farmName
~ double fertility
~ String strRainfall
~ double wheatCount
~ double oatCount
~ double milkCount
~ double eggCount
~ double sugarCount
~ double wheatMultiplier
~ double oatMultiplier
~ double milkMultiplier
~ double eggMultiplier
~ double sugarMultiplier
~ double farmMultiplier
~ double controlLosses
~ Contract[] contract
+ void signContract(double,double,int,int)
+ void updateContracts()
+ void updating()
+ String getName()
+ String getStrTypeLandscape()
+ String getStrRainfall()
+ double getControlLosses()
+ double getContractMoney(int)
+ double getContractProduct(int)
+ double getContractResourse1(int)
+ double getContractResourse2(int)
}
class com.profit_taker.game.screens.SmallGameScreen {
~ int move
~ double absoluteProfit
~ double absoluteLosses
~ double money
+ int previous_x
~ int[][][] map
~ Skin skin
~ Skin skin2
~ Skin skin3
- Stage stage
- Texture texture
- Texture texture2
- Texture next_move_button_tx
- Texture left_button
~ Json json
- Image outer_design
~ Image arrow
~ ImageButton info_button
~ ImageButton button_1
~ Image[][] top_arr
~ Image[][] bottom_arr
~ ImageButton[][] button_arr
~ ImageButton[] contract_buttons
~ EmptyCell[][] cells
~ CityCell[][] cities
~ FarmCell[][] farms
~ TextField[] fields
~ TextField[] names
~ TextField[] counts
~ TextField[] contract_show
~ TextField show_money
~ Table table_info
~ Table table_info_contracts
~ Table table_contracts
+ void moveCells(int,int,int,int)
+ void showInfo(int,int,int,int)
+ void update_contract(int,int,int,int)
+ void choosing_contract(int,int,int)
+ void showActions(int,int)
+ void updateMoneyChanges()
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.control.MyGestureListener {
+ boolean touchDown(float,float,int,int)
+ boolean tap(float,float,int,int)
+ boolean longPress(float,float)
+ boolean fling(float,float,int)
+ boolean pan(float,float,float,float)
+ boolean panStop(float,float,int,int)
+ boolean zoom(float,float)
+ boolean pinch(Vector2,Vector2,Vector2,Vector2)
+ void pinchStop()
}
class com.profit_taker.game.control.GameButton {
}
abstract class com.profit_taker.game.model.GameObject {
~ int typeLandscape
~ double rainfall
}
class com.profit_taker.game.screens.LeaderboardScreen {
- Stage stage
- Texture texture
- Image choosing_load_view
~ ImageButton backButton
~ Button button
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.screens.NewGameChoosing {
- Stage stage
- Texture texture
- EmptyCell cell
- OrthographicCamera camera
- Image choosing_view
~ ImageButton newGameButton
~ Button button
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.model.EmptyCell {
~ int typeLandscape
~ int type_cell
~ String name
~ String strRainfall
~ String strTypeLandscape
+ void doSmth()
+ String getName()
+ String getStrTypeLandscape()
+ String getStrRainfall()
}
abstract class com.profit_taker.game.screens.GameScreen {
- ProfitTaker game
- void hideSystemBars()
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.screens.ProfitTaker {
+ MainScreen menuScreen
+ NewGameChoosing gameChoosingScreen
+ LoadGameChoosing loadGameChoosingScreen
+ SmallGameScreen smallGameScreen
+ LeaderboardScreen leaderboardScreen
+ void create()
}
class com.profit_taker.game.model.CityCell {
~ String cityName
~ int population
~ double happiness
~ double cakeCount
~ double bisquitCount
~ double breadCount
~ double dessertCount
~ double controlProfit
~ double controlLosses
~ Contract[] contract
+ void updateContracts()
+ void updating()
+ String getName()
+ String getStrTypeLandscape()
+ String getStrRainfall()
+ int getPopulation()
+ double getControlLosses()
+ double getHappiness()
+ double getCakeCount()
+ double getBisquitCount()
+ double getBreadCount()
+ double getDessertCount()
+ double getControlProfit()
+ Contract getContract(int)
}
class com.profit_taker.game.screens.MainScreen {
- Stage stage
- Texture texture
- Texture exit_button
- Image logo
~ ImageButton newGameButton
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.screens.LoadGameChoosing {
- Stage stage
- Texture texture
- Image choosing_load_view
~ ImageButton backButton
~ Button button
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.profit_taker.game.model.MyStorage {
~ double wheatCount
~ double oatCount
~ double milkCount
~ double eggCount
~ double sugarCount
+ void updateStorage(Contract[],Contract[])
}


com.profit_taker.game.model.EmptyCell <|-- com.profit_taker.game.model.FarmCell
com.profit_taker.game.screens.GameScreen <|-- com.profit_taker.game.screens.SmallGameScreen
com.profit_taker.game.control.GestureListener <|.. com.profit_taker.game.control.MyGestureListener
com.badlogic.gdx.scenes.scene2d.ui.Button <|-- com.profit_taker.game.control.GameButton
com.profit_taker.game.screens.GameScreen <|-- com.profit_taker.game.screens.LeaderboardScreen
com.profit_taker.game.screens.GameScreen <|-- com.profit_taker.game.screens.NewGameChoosing
com.profit_taker.game.model.GameObject <|-- com.profit_taker.game.model.EmptyCell
com.badlogic.gdx.Screen <|.. com.profit_taker.game.screens.GameScreen
com.badlogic.gdx.Game <|-- com.profit_taker.game.screens.ProfitTaker
com.profit_taker.game.model.EmptyCell <|-- com.profit_taker.game.model.CityCell
com.profit_taker.game.screens.GameScreen <|-- com.profit_taker.game.screens.MainScreen
com.profit_taker.game.screens.GameScreen <|-- com.profit_taker.game.screens.LoadGameChoosing
@enduml